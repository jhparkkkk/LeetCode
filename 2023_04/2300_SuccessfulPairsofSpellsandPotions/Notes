Input: spells = [5,1,3], potions = [1,2,3,4,5], success = 7
Output: [4,0,3]
Explanation:
- 0th spell: 5 * [1,2,3,4,5] = [5,10,15,20,25]. 4 pairs are successful.
- 1st spell: 1 * [1,2,3,4,5] = [1,2,3,4,5]. 0 pairs are successful.
- 2nd spell: 3 * [1,2,3,4,5] = [3,6,9,12,15]. 3 pairs are successful.
Thus, [4,0,3] is returned.

Input: spells = [3,1,2], potions = [8,5,8], success = 16
Output: [2,0,2]
Explanation:
- 0th spell: 3 * [8,5,8] = [24,15,24]. 2 pairs are successful.
- 1st spell: 1 * [8,5,8] = [8,5,8]. 0 pairs are successful. 
- 2nd spell: 2 * [8,5,8] = [16,10,16]. 2 pairs are successful. 
Thus, [2,0,2] is returned.

std::transform(s.cbegin(), s.cend(),
                   s.begin(), // write to the same location
                   [](unsigned char c) { return std::toupper(c); });

std::transform(first, first + 5, second, results, std::multiplies<int>());

upper_bound(v.begin(), v.end(), 6);

 std::distance(first,last)

std::upper_bound(v.begin(), v.end(), target,
                 [](const int &a, const int &b) { return a <= b; });
38329 * 56029

std::vector<int> vect_int = {1, 2, 3, 4, 5};
std::vector<long long> vect_long_long(vect_int.size());

std::transform(vect_int.begin(), vect_int.end(), vect_long_long.begin(),
               [](int i) { return static_cast<long long>(i); });

idea : binary search